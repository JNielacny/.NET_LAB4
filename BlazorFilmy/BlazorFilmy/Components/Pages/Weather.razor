@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control" @oninput="Input" placeholder="Filter by name" />
<br>
<button class="btn btn-primary" @onclick="WarmDaysFilter">Show Warm Days</button> @* Filtruj ciepłe dni *@
<button class="btn btn-primary" @onclick="ColdDaysFilter">Show Cold Days</button> @* Filtruj zimne dni *@
<button class="btn btn-danger" @onclick="RestoreTable">Restore</button> @* Przywróć *@
<br>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecasts ?? forecasts)
            {
                @if (forecast.Displayed)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
<p>Total warm days: @warmDays</p>

@code {
    private WeatherForecast[]? forecasts;
    private int warmDays;
    private WeatherForecast[]? filteredForecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        CountWarmDays();
    }

    private void CountWarmDays()
    {
        warmDays = forecasts.Count(forecast => forecast.TemperatureC > 15 && forecast.Displayed);
    }

    private void WarmDaysFilter()
    {
        filteredForecasts = forecasts.Where(forecast => forecast.TemperatureC > 15).ToArray();
        foreach (var forecast in forecasts)
        {
            forecast.Displayed = filteredForecasts.Contains(forecast);
        }
        CountWarmDays();
    }

    private void ColdDaysFilter()
    {
        filteredForecasts = forecasts.Where(forecast => forecast.TemperatureC <= 15).ToArray();
        foreach (var forecast in forecasts)
        {
            forecast.Displayed = filteredForecasts.Contains(forecast);
        }
        CountWarmDays();
    }

    private void RestoreTable()
    {
        filteredForecasts = null;
        foreach (var forecast in forecasts)
        {
            forecast.Displayed = true;
        }
        CountWarmDays();
    }

    private void Input(ChangeEventArgs arg)
    {
        string filterText = arg.Value?.ToString() ?? "";
        filteredForecasts = forecasts.Where(forecast => forecast.Summary?.ToLower().Contains(filterText.ToLower()) ?? false).ToArray();
        foreach (var forecast in forecasts)
        {
            forecast.Displayed = filteredForecasts.Contains(forecast);
        }
        CountWarmDays();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public bool Displayed { get; set; } = true;
    }
}

@rendermode InteractiveServer