@page "/movies/details"
@inject BlazorFilmy.Data.ApplicationDbContext DB
@using BlazorFilmy.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {   // Tabela z wyświetlaniem tytułu, obrazka (max 200x200), opisu, data wydaniam, ocena, ilość ocen 
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrWhiteSpace(movie.ImageUrl))
                {
                    <img src="@movie.ImageUrl" alt="Movie Image" style="max-width: 200px; max-height: 200px;" />
                }
                else
                {
                    <p>No image available</p>
                }
            </dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">RelaseDate</dt>
            <dd class="col-sm-10">@movie.ReleaseDate</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@Math.Round(Convert.ToDecimal(movie.Rate), 2)</dd>
            <dt class="col-sm-2">Number of Ratings</dt>
            <dd class="col-sm-10">@(movie.Ratings?.Count ?? 0)</dd>
        </dl>
        <div>
            <div>
            <AuthorizeView>
                <Authorized>
                @* dodawanie nowych ocen tylko dla zautoryzowanych *@
                <label for="newRating">New Rating (1-10): </label>
                <input type="number" id="newRating" min="1" max="10" @bind="newRating" />
                @if(newRating<10&&newRating>1)
                {
                    <button @onclick="()=> AddRating(newRating)">Add Rating</button>
                }
                </Authorized>
            </AuthorizeView>            
            </div>
            <AuthorizeView>
                <Authorized>
                    @* edycja dla zautoryzowanych *@
                    <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
                </Authorized>
                <NotAuthorized>
                    @* powrót do listy filmów *@
                    <a href="@($"/movies")">Back to List</a>
                </NotAuthorized>
            </AuthorizeView>
                
        </div>
    }
</div>

@code {
    private Movie? movie;
    private int newRating;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // Dodawanie ocen
    private async Task AddRating(int rating)
    {
        if (movie != null)
        {
            if (movie.Ratings == null)
            {
                movie.Ratings = new List<double>();
            }
            // Dodanie ocen do listy
            movie.Ratings.Add(rating);
            // Wyliczenie średniej ocen
            movie.Rate = movie.Ratings.Average();

            // Zupdatowanie informacji
            DB.Movie.Update(movie);
            await DB.SaveChangesAsync();

            // Chyba niepotrzebne
            StateHasChanged();
        }
    }
}
